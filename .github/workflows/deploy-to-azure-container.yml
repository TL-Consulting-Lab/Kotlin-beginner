name: Deploy Kotlin App to Azure Container Instances

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  AZURE_CONTAINER_REGISTRY: kotlinappregistry1859    # Set this to your ACR name
  CONTAINER_NAME: kotlin-product-management
  RESOURCE_GROUP: kotlin-app-rg                      # Set this to your resource group
  AZURE_CONTAINER_INSTANCE: kotlin-app-instance

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: üõéÔ∏è Checkout code
      uses: actions/checkout@v4

    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: üîê Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
        username: ${{ secrets.AZURE_ACR_USERNAME }}
        password: ${{ secrets.AZURE_ACR_PASSWORD }}

    - name: üèóÔ∏è Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:latest
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: üîê Log in to Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: üöÄ Deploy to Azure Container Instances
      run: |
        az container create \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.AZURE_CONTAINER_INSTANCE }} \
          --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:latest \
          --registry-login-server ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io \
          --registry-username ${{ secrets.AZURE_ACR_USERNAME }} \
          --registry-password ${{ secrets.AZURE_ACR_PASSWORD }} \
          --dns-name-label kotlin-product-app-${{ github.run_number }} \
          --ports 8080 \
          --cpu 1 \
          --memory 2 \
          --restart-policy Always \
          --environment-variables \
            APP_ENV=production

    - name: üåê Get application URL
      run: |
        URL=$(az container show \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.AZURE_CONTAINER_INSTANCE }} \
          --query "ipAddress.fqdn" \
          --output tsv)
        echo "Application deployed at: http://$URL:8080"
        echo "::notice title=Deployment Successful::Application is available at http://$URL:8080"

    - name: üß™ Health Check
      run: |
        echo "Waiting for container to start..."
        sleep 60
        
        URL=$(az container show \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.AZURE_CONTAINER_INSTANCE }} \
          --query "ipAddress.fqdn" \
          --output tsv)
        
        # Test if the application is running
        curl -f "http://$URL:8080" || echo "Health check failed - application might still be starting"
